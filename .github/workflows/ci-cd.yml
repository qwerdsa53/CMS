name: Multi-Service CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      api-gateway-changed: ${{ steps.check-api-gateway.outputs.changed }}
      user-service-changed: ${{ steps.check-user-service.outputs.changed }}
      post-service-changed: ${{ steps.check-post-service.outputs.changed }}
      feed-service-changed: ${{ steps.check-feed-service.outputs.changed }}
      for-deploy: ${{steps.check-deploy-status.outputs.status}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check changes in api-gateway
        id: check-api-gateway
        run: |
          git fetch --depth=2 origin ${{ github.ref }}
          if git diff --name-only HEAD~1 HEAD | grep '^api-gateway/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check changes in user-service
        id: check-user-service
        run: |
          git fetch --depth=2 origin ${{ github.ref }}
          if git diff --name-only HEAD~1 HEAD | grep '^user-service/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check changes in post-service
        id: check-post-service
        run: |
          git fetch --depth=2 origin ${{ github.ref }}
          if git diff --name-only HEAD~1 HEAD | grep '^post-service/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check changes in feed-service
        id: check-feed-service
        run: |
          git fetch --depth=2 origin ${{ github.ref }}
          if git diff --name-only HEAD~1 HEAD | grep '^feed-service/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if need to deploy
        id: check-deploy-status
        run: |
          git fetch --depth=2 origin ${{ github.ref }}
          MESSAGE="$(git log -1 --pretty=%B)"
          if [[ "$MESSAGE" == *"deploy yc"* ]]; then
            echo "status=true" >> $GITHUB_OUTPUT
          else
            echo "status=false" >> $GITHUB_OUTPUT
          fi
      

  api-gateway:
    needs: check-commit
    if: needs.check-commit.outputs.api-gateway-changed == 'true'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.P_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.P_PASSWORD }}
          POSTGRES_DB: cms

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping || exit 1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build and Test api-gateway
        working-directory: ./api-gateway
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/cms
          SPRING_DATASOURCE_USERNAME: ${{ secrets.P_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.P_PASSWORD }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          mvn clean install
          mvn test

      - name: Set up Docker Buildx
        if: needs.check-commit.outputs.for-deploy == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Install jq
        if: needs.check-commit.outputs.for-deploy == 'true'
        run: sudo apt-get install -y jq

      - name: Log in to Docker Hub
        if: needs.check-commit.outputs.for-deploy == 'true'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build and Push Docker Image
        if: needs.check-commit.outputs.for-deploy == 'true'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/api-gateway"
          LATEST_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/$IMAGE_NAME/tags" | jq -r '.results | map(.name) | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last // "0.0.0"')
          echo "Последняя версия: $LATEST_VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          echo "Новая версия: $NEW_VERSION"

          docker build -t $IMAGE_NAME:$NEW_VERSION ./api-gateway
          docker push $IMAGE_NAME:$NEW_VERSION

          echo "image=$IMAGE_NAME:$NEW_VERSION" >> $GITHUB_ENV

      - name: Wait for Docker Hub to Update
        if: needs.check-commit.outputs.for-deploy == 'true'
        run: sleep 10


      - name: Update Deployment Image Version
        if: needs.check-commit.outputs.for-deploy == 'true'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/api-gateway
        run: |
          echo "Получаем все доступные теги..."
          ALL_TAGS=$(curl -s "https://registry.hub.docker.com/v2/repositories/$IMAGE_NAME/tags?page_size=100" | jq -r '[.results[].name] | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last // "0.0.0"')
          echo "Найдена последняя версия: $ALL_TAGS"
          
          LATEST_VERSION=$ALL_TAGS
          echo "Устанавливаем последнюю версию образа: $LATEST_VERSION"
          
          sed -i "s|image: $IMAGE_NAME:.*|image: $IMAGE_NAME:$LATEST_VERSION|" ./kubernetes/api-gateway/api-gateway-deployment.yaml
          echo "Файл деплоймента после изменений:"
          cat ./kubernetes/api-gateway/api-gateway-deployment.yaml 
      

      - name: Install Yandex Cloud CLI
        if: needs.check-commit.outputs.for-deploy == 'true'
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "PATH=$HOME/yandex-cloud/bin:$PATH" >> $GITHUB_ENV

      - name: Deploy to Yandex Cloud Kubernetes
        if: needs.check-commit.outputs.for-deploy == 'true'
        env:
          YC_KEY_JSON: ${{ secrets.YC_KEY_JSON }}
          CLUSTER_ID: ${{ secrets.CLUSTER_ID }}
          FOLDER_ID: ${{ secrets.FOLDER_ID }}
        run: |
          mkdir -p ~/.config/yandex-cloud
          echo "$YC_KEY_JSON" > ~/.config/yandex-cloud/key.json
          yc config set service-account-key ~/.config/yandex-cloud/key.json
          yc config set folder-id $FOLDER_ID

          KUBECONFIG_PATH=~/.kube/config
          yc managed-kubernetes cluster get-credentials \
            --id $CLUSTER_ID \
            --external \
            --force --kubeconfig $KUBECONFIG_PATH

          echo "Удаляем старый деплоймент..."
          kubectl --kubeconfig=$KUBECONFIG_PATH delete deployment api-gateway || true

          echo "Применяем новый файл деплоймента..."
          kubectl --kubeconfig=$KUBECONFIG_PATH apply -f ./kubernetes/api-gateway/api-gateway-deployment.yaml
    

  user-service:
    needs: check-commit
    if: needs.check-commit.outputs.user-service-changed == 'true'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.P_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.P_PASSWORD }}
          POSTGRES_DB: cms

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping || exit 1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build and Test user-service
        working-directory: ./user-service
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/cms
          SPRING_DATASOURCE_USERNAME: ${{ secrets.P_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.P_PASSWORD }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          mvn clean install
          mvn test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build and Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/user-service"
          LATEST_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/$IMAGE_NAME/tags" | jq -r '.results | map(.name) | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last // "0.0.0"')
          echo "Последняя версия: $LATEST_VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          echo "Новая версия: $NEW_VERSION"

          docker build -t $IMAGE_NAME:$NEW_VERSION ./user-service
          docker push $IMAGE_NAME:$NEW_VERSION

          echo "image=$IMAGE_NAME:$NEW_VERSION" >> $GITHUB_ENV

      - name: Wait for Docker Hub to Update
        run: sleep 10


      - name: Update Deployment Image Version
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/user-service
        run: |
          echo "Получаем все доступные теги..."
          ALL_TAGS=$(curl -s "https://registry.hub.docker.com/v2/repositories/$IMAGE_NAME/tags?page_size=100" | jq -r '[.results[].name] | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last // "0.0.0"')
          echo "Найдена последняя версия: $ALL_TAGS"
          
          LATEST_VERSION=$ALL_TAGS
          echo "Устанавливаем последнюю версию образа: $LATEST_VERSION"
          
          sed -i "s|image: $IMAGE_NAME:.*|image: $IMAGE_NAME:$LATEST_VERSION|" ./kubernetes/user-service/user-service-deployment.yaml
          echo "Файл деплоймента после изменений:"
          cat ./kubernetes/user-service/user-service-deployment.yaml 


      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "PATH=$HOME/yandex-cloud/bin:$PATH" >> $GITHUB_ENV

      - name: Deploy to Yandex Cloud Kubernetes
        env:
          YC_KEY_JSON: ${{ secrets.YC_KEY_JSON }}
          CLUSTER_ID: ${{ secrets.CLUSTER_ID }}
          FOLDER_ID: ${{ secrets.FOLDER_ID }}
        run: |
          mkdir -p ~/.config/yandex-cloud
          echo "$YC_KEY_JSON" > ~/.config/yandex-cloud/key.json
          yc config set service-account-key ~/.config/yandex-cloud/key.json
          yc config set folder-id $FOLDER_ID

          KUBECONFIG_PATH=~/.kube/config
          yc managed-kubernetes cluster get-credentials \
            --id $CLUSTER_ID \
            --external \
            --force --kubeconfig $KUBECONFIG_PATH

          echo "Удаляем старый деплоймент..."
          kubectl --kubeconfig=$KUBECONFIG_PATH delete deployment user-service || true

          echo "Применяем новый файл деплоймента..."
          kubectl --kubeconfig=$KUBECONFIG_PATH apply -f ./kubernetes/user-service/user-service-deployment.yaml


  post-service:
    needs: check-commit
    if: needs.check-commit.outputs.post-service-changed == 'true'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.P_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.P_PASSWORD }}
          POSTGRES_DB: cms

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping || exit 1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build and Test post-service
        working-directory: ./post-service
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/cms
          SPRING_DATASOURCE_USERNAME: ${{ secrets.P_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.P_PASSWORD }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          mvn clean install
          mvn test
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build and Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/post-service"
          LATEST_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/$IMAGE_NAME/tags" | jq -r '.results | map(.name) | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last // "0.0.0"')
          echo "Последняя версия: $LATEST_VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          echo "Новая версия: $NEW_VERSION"

          docker build -t $IMAGE_NAME:$NEW_VERSION ./post-service
          docker push $IMAGE_NAME:$NEW_VERSION

          echo "image=$IMAGE_NAME:$NEW_VERSION" >> $GITHUB_ENV

      - name: Wait for Docker Hub to Update
        run: sleep 10


      - name: Update Deployment Image Version
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/post-service
        run: |
          echo "Получаем все доступные теги..."
          ALL_TAGS=$(curl -s "https://registry.hub.docker.com/v2/repositories/$IMAGE_NAME/tags?page_size=100" | jq -r '[.results[].name] | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last // "0.0.0"')
          echo "Найдена последняя версия: $ALL_TAGS"
          
          LATEST_VERSION=$ALL_TAGS
          echo "Устанавливаем последнюю версию образа: $LATEST_VERSION"
          
          sed -i "s|image: $IMAGE_NAME:.*|image: $IMAGE_NAME:$LATEST_VERSION|" ./kubernetes/post-service/post-service-deployment.yaml
          echo "Файл деплоймента после изменений:"
          cat ./kubernetes/post-service/post-service-deployment.yaml 


      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "PATH=$HOME/yandex-cloud/bin:$PATH" >> $GITHUB_ENV

      - name: Deploy to Yandex Cloud Kubernetes
        env:
          YC_KEY_JSON: ${{ secrets.YC_KEY_JSON }}
          CLUSTER_ID: ${{ secrets.CLUSTER_ID }}
          FOLDER_ID: ${{ secrets.FOLDER_ID }}
        run: |
          mkdir -p ~/.config/yandex-cloud
          echo "$YC_KEY_JSON" > ~/.config/yandex-cloud/key.json
          yc config set service-account-key ~/.config/yandex-cloud/key.json
          yc config set folder-id $FOLDER_ID

          KUBECONFIG_PATH=~/.kube/config
          yc managed-kubernetes cluster get-credentials \
            --id $CLUSTER_ID \
            --external \
            --force --kubeconfig $KUBECONFIG_PATH

          echo "Удаляем старый деплоймент..."
          kubectl --kubeconfig=$KUBECONFIG_PATH delete deployment post-service || true

          echo "Применяем новый файл деплоймента..."
          kubectl --kubeconfig=$KUBECONFIG_PATH apply -f ./kubernetes/post-service/post-service-deployment.yaml


  feed-service:
    needs: check-commit
    if: needs.check-commit.outputs.feed-service-changed == 'true'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.P_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.P_PASSWORD }}
          POSTGRES_DB: cms

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping || exit 1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build and Test feed-service
        working-directory: ./feed-service
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/cms
          SPRING_DATASOURCE_USERNAME: ${{ secrets.P_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.P_PASSWORD }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          mvn clean install
          mvn test
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build and Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/feed-service"
          LATEST_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/$IMAGE_NAME/tags" | jq -r '.results | map(.name) | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last // "0.0.0"')
          echo "Последняя версия: $LATEST_VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          echo "Новая версия: $NEW_VERSION"

          docker build -t $IMAGE_NAME:$NEW_VERSION ./feed-service
          docker push $IMAGE_NAME:$NEW_VERSION

          echo "image=$IMAGE_NAME:$NEW_VERSION" >> $GITHUB_ENV

      - name: Wait for Docker Hub to Update
        run: sleep 10


      - name: Update Deployment Image Version
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/feed-service
        run: |
          echo "Получаем все доступные теги..."
          ALL_TAGS=$(curl -s "https://registry.hub.docker.com/v2/repositories/$IMAGE_NAME/tags?page_size=100" | jq -r '[.results[].name] | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last // "0.0.0"')
          echo "Найдена последняя версия: $ALL_TAGS"
          
          LATEST_VERSION=$ALL_TAGS
          echo "Устанавливаем последнюю версию образа: $LATEST_VERSION"
          
          sed -i "s|image: $IMAGE_NAME:.*|image: $IMAGE_NAME:$LATEST_VERSION|" ./kubernetes/feed-service/feed-service-deployment.yaml
          echo "Файл деплоймента после изменений:"
          cat ./kubernetes/feed-service/feed-service-deployment.yaml 


      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "PATH=$HOME/yandex-cloud/bin:$PATH" >> $GITHUB_ENV

      - name: Deploy to Yandex Cloud Kubernetes
        env:
          YC_KEY_JSON: ${{ secrets.YC_KEY_JSON }}
          CLUSTER_ID: ${{ secrets.CLUSTER_ID }}
          FOLDER_ID: ${{ secrets.FOLDER_ID }}
        run: |
          mkdir -p ~/.config/yandex-cloud
          echo "$YC_KEY_JSON" > ~/.config/yandex-cloud/key.json
          yc config set service-account-key ~/.config/yandex-cloud/key.json
          yc config set folder-id $FOLDER_ID

          KUBECONFIG_PATH=~/.kube/config
          yc managed-kubernetes cluster get-credentials \
            --id $CLUSTER_ID \
            --external \
            --force --kubeconfig $KUBECONFIG_PATH

          echo "Удаляем старый деплоймент..."
          kubectl --kubeconfig=$KUBECONFIG_PATH delete deployment feed-service || true

          echo "Применяем новый файл деплоймента..."
          kubectl --kubeconfig=$KUBECONFIG_PATH apply -f ./kubernetes/feed-service/feed-service-deployment.yaml