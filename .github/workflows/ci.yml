name: Multi-Service CI/CD

on:
  push:
    branches:
      - master
      - test-actions
  pull_request:
    branches:
      - master

jobs:
  check-files:
    runs-on: ubuntu-latest
    outputs:
      api-gateway-changed: ${{ steps.check-api-gateway.outputs.changed }}
      user-service-changed: ${{ steps.check-user-service.outputs.changed }}
      post-service-changed: ${{ steps.check-post-service.outputs.changed }}
      feed-service-changed: ${{ steps.check-feed-service.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check changes in api-gateway
        id: check-api-gateway
        run: |
          git fetch --depth=2 origin ${{ github.ref }}
          if git diff --name-only HEAD~1 HEAD | grep '^api-gateway/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check changes in user-service
        id: check-user-service
        run: |
          git fetch --depth=2 origin ${{ github.ref }}
          if git diff --name-only HEAD~1 HEAD | grep '^user-service/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check changes in post-service
        id: check-post-service
        run: |
          git fetch --depth=2 origin ${{ github.ref }}
          if git diff --name-only HEAD~1 HEAD | grep '^post-service/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check changes in feed-service
        id: check-feed-service
        run: |
          git fetch --depth=2 origin ${{ github.ref }}
          if git diff --name-only HEAD~1 HEAD | grep '^feed-service/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  api-gateway:
    needs: check-files
    if: needs.check-files.outputs.api-gateway-changed == 'true'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U ${{ secrets.P_USERNAME }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        env:
          POSTGRES_USER: ${{ secrets.P_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.P_PASSWORD }}
          POSTGRES_DB: cms

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping || exit 1"

    env:
      P_PASSWORD: ${{ secrets.P_PASSWORD }}
      P_URL: jdbc:postgresql://localhost:5432/cms
      P_USERNAME: ${{ secrets.P_USERNAME }}
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      SECRET: ${{ secrets.SECRET }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build api-gateway
        working-directory: ./api-gateway
        run: mvn clean install

      - name: Test api-gateway
        working-directory: ./api-gateway
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/cms
          SPRING_DATASOURCE_USERNAME: ${{ secrets.P_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.P_PASSWORD }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: mvn test

  user-service:
    needs: check-files
    if: needs.check-files.outputs.user-service-changed == 'true'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U ${{ secrets.P_USERNAME }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        env:
          POSTGRES_USER: ${{ secrets.P_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.P_PASSWORD }}
          POSTGRES_DB: CMS

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping || exit 1"

    env:
      P_PASSWORD: ${{ secrets.P_PASSWORD }}
      P_URL: jdbc:postgresql://localhost:5432/CMS
      P_USERNAME: ${{ secrets.P_USERNAME }}
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      SECRET: ${{ secrets.SECRET }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build user-service
        working-directory: ./user-service
        run: mvn clean install

      - name: Test user-service
        working-directory: ./user-service
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/CMS
          SPRING_DATASOURCE_USERNAME: ${{ secrets.P_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.P_PASSWORD }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: mvn test
  feed-service:
    needs: check-files
    if: needs.check-files.outputs.feed-service-changed == 'true'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U ${{ secrets.P_USERNAME }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        env:
          POSTGRES_USER: ${{ secrets.P_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.P_PASSWORD }}
          POSTGRES_DB: CMS

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping || exit 1"

    env:
      P_PASSWORD: ${{ secrets.P_PASSWORD }}
      P_URL: jdbc:postgresql://localhost:5432/CMS
      P_USERNAME: ${{ secrets.P_USERNAME }}
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      SECRET: ${{ secrets.SECRET }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build feed-service
        working-directory: ./feed-service
        run: mvn clean install

      - name: Test feed-service
        working-directory: ./feed-service
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/CMS
          SPRING_DATASOURCE_USERNAME: ${{ secrets.P_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.P_PASSWORD }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: mvn test
  post-service:
    needs: check-files
    if: needs.check-files.outputs.post-service-changed == 'true'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U ${{ secrets.P_USERNAME }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        env:
          POSTGRES_USER: ${{ secrets.P_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.P_PASSWORD }}
          POSTGRES_DB: CMS

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping || exit 1"

    env:
      P_PASSWORD: ${{ secrets.P_PASSWORD }}
      P_URL: jdbc:postgresql://localhost:5432/CMS
      P_USERNAME: ${{ secrets.P_USERNAME }}
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      SECRET: ${{ secrets.SECRET }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build post-service
        working-directory: ./post-service
        run: mvn clean install

      - name: Test post-service
        working-directory: ./post-service
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/CMS
          SPRING_DATASOURCE_USERNAME: ${{ secrets.P_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.P_PASSWORD }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: mvn test
